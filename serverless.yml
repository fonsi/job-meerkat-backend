org: jobmeerkat
app: jobmeerkat
service: jobmeerkat

frameworkVersion: '4.4.18'

params:
    default:
        processCompanyConsumerTimeout: 300
        processCompanyQueueVisibilityTimeout: 310
        publishSocialPostsTimeout: 120
        publishSocialPostsQueueVisibilityTimeout: 130
    dev:
        processCompanySchedule: cron(0 0 1 1 ? 1970) # never
        socialPostsSchedule: cron(0 0 1 1 ? 1970) # never
        socialPostsCheck: cron(0 0 1 1 ? 1970) # never
    production:
        processCompanySchedule: cron(0 0 ? * * *) # every day at 0 am
        socialPostsSchedule: cron(0 2 ? * * *) # every day at 2 am
        socialPostsCheck: cron(0 * ? * * *) # every day every hour

provider:
    name: aws
    runtime: nodejs20.x
    profile: ${env:PROFILE}
    region: ${env:REGION}
    environment:
        STAGE: ${sls:stage}
        DYNAMODB_COMPANY_TABLE_NAME: ${sls:stage}-company
        DYNAMODB_JOB_POST_TABLE_NAME: ${sls:stage}-job-post
        DYNAMODB_SCHEDULED_SOCIAL_POST_TABLE_NAME: ${sls:stage}-scheduled-social-post
        PROCESS_COMPANY_QUEUE_NAME: ${sls:stage}-process-company-sqs-queue.fifo
        PUBLISH_SOCIAL_POST_QUEUE_NAME: ${sls:stage}-publish-social-post-sqs-queue
        OPENAI_API_KEY: ${env:OPENAI_API_KEY}
        ASSETS_URL: ${env:ASSETS_URL}
        ROLLBAR_ACCESS_TOKEN: ${env:ROLLBAR_ACCESS_TOKEN}
        THREADS_API_TOKEN: ${env:THREADS_API_TOKEN}
    iamRoleStatements:
        - Effect: 'Allow'
          Resource:
              - arn:aws:dynamodb:*:*:table/*
          Action:
              - 'dynamodb:*'
        - Effect: Allow
          Action:
              - sqs:*
          Resource:
              - Fn::GetAtt: [processCompanyQueue, Arn]
              - Fn::GetAtt: [publishSocialPostQueue, Arn]

resources:
    Resources:
        companyTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:provider.environment.DYNAMODB_COMPANY_TABLE_NAME}
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        jobPostTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:provider.environment.DYNAMODB_JOB_POST_TABLE_NAME}
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                    - AttributeName: companyId
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                    - AttributeName: companyId
                      KeyType: RANGE
                ProvisionedThroughput:
                    ReadCapacityUnits: 10
                    WriteCapacityUnits: 2
        scheduledSocialPostsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:provider.environment.DYNAMODB_SCHEDULED_SOCIAL_POST_TABLE_NAME}
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        processCompanyQueue:
            Type: 'AWS::SQS::Queue'
            Properties:
                QueueName: ${self:provider.environment.PROCESS_COMPANY_QUEUE_NAME}
                FifoQueue: true
                VisibilityTimeout: ${param:processCompanyQueueVisibilityTimeout}
        publishSocialPostQueue:
            Type: 'AWS::SQS::Queue'
            Properties:
                QueueName: ${self:provider.environment.PUBLISH_SOCIAL_POST_QUEUE_NAME}
                VisibilityTimeout: ${param:publishSocialPostsQueueVisibilityTimeout}

functions:
    devScrapCompany:
        # function used in development to build scrappers
        handler: src/company/infrastructure/dev/scrapCompany.index
    companyId:
        handler: src/company/infrastructure/api/id/handler.index
        events:
            - httpApi:
                  path: /company/{id}
                  method: any
    company:
        handler: src/company/infrastructure/api/handler.index
        events:
            - httpApi:
                  path: /company
                  method: any
    jobPost:
        handler: src/jobPost/infrastructure/api/handler.index
        events:
            - httpApi:
                  path: /jobPost
                  method: any
    category:
        handler: src/category/infrastructure/api/handler.index
        events:
            - httpApi:
                  path: /category
                  method: any
    processCompanyScheduler:
        handler: src/company/infrastructure/api/enqueue/handler.index
        events:
            - schedule: ${param:processCompanySchedule}
    processCompanyConsumer:
        handler: src/company/infrastructure/queue/sqs/consumer/handler.index
        timeout: ${param:processCompanyConsumerTimeout}
        events:
            - sqs:
                  arn:
                      Fn::GetAtt:
                          - processCompanyQueue
                          - Arn
                  batchSize: 1
    scheduleSocialPosts:
        handler: src/social/infrastructure/api/schedule/handler.index
        events:
            - schedule: ${param:socialPostsSchedule}
    checkSocialPosts:
        handler: src/social/infrastructure/api/enqueue/handler.index
        events:
            - schedule: ${param:socialPostsCheck}
    publishSocialPosts:
        handler: src/social/infrastructure/queue/sqs/consumer/handler.index
        maximumRetryAttempts: 1
        timeout: ${param:publishSocialPostsTimeout}
        events:
            - sqs:
                  arn:
                      Fn::GetAtt:
                          - publishSocialPostQueue
                          - Arn
                  batchSize: 1
